// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id Int @id @unique @default(autoincrement())
  username String?
  email String @unique
  password String
  tokens    Token[] 
  refreshTokens  RefreshToken[]
  photo_url String
  created_at DateTime @default(now())
  likes Like[]
  followers   Follow[] @relation("followersRelation")
  following   Follow[] @relation("followingRelation")
  comments Comment[]
  posts Post[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime?
}
model Comment {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  content    String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
}

model Post {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  title      String
  content    String
  imageUrl String?
  hashtag PostHashtag[]
  created_at DateTime @default(now())
  comments   Comment[]
  likes      Like[]
}

model Hashtag{
  id         Int         @id @default(autoincrement())
  name String @unique
  posts PostHashtag[]
  createdAt DateTime @default(now())
  updatedAt  DateTime    @updatedAt
}

model PostHashtag{
  postId Int
  hashtagId Int
  post Post @relation(fields: [postId],references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([postId, hashtagId])
  @@unique([postId, hashtagId])
  createdAt  DateTime    @default(now())
}


model Like {
  userId     Int
  postId     Int
  created_at DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Follow {
  followingUserId Int
  followedUserId  Int
  created_at      DateTime @default(now())

  follower        User @relation("followersRelation", fields: [followingUserId], references: [id])
  following       User @relation("followingRelation", fields: [followedUserId], references: [id])

  @@id([followingUserId, followedUserId])
}